version: '3.7'
services:

    api-admin:
        build:
            context: ./API/admin
            dockerfile: dev.Dockerfile
        restart: always
        volumes:
            - ./API/admin:/admin
        command: ./mvnw spring-boot:run
        ports:
            - "7000:7000"
        depends_on:
            - api-games
            - api-iam

    api-games:
        build:
            context: ./API/games
            dockerfile: dev.Dockerfile
        restart: always
        env_file:
            - ./secrets/games/MONGO_CONNECTION_STRING.env
        volumes:
            - ./API/games:/games
        # Use if should be available on host
        ports:
            - "9000:9000"
        #command: sbt run
        # Use sbt in interactive mode during development
        # 1. docker exec -it bobauth_api-games_1 /bin/bash
        # 2. $ sbt
        # 3. [games] $ run
        command: sleep 36000
        depends_on:
            - data-games

    api-home:
        build:
            context: ./API/home
            dockerfile: dev.Dockerfile
        restart: always
        volumes:
            - ./API/home:/home
        ports:
            - "3000:3000"
        command: npm start
        depends_on:
            - api-games
            - api-iam

    api-iam:
        build:
            context: ./API/iam
            dockerfile: dev.Dockerfile
        restart: always
        volumes:
            - ./API/iam:/iam
            - ./secrets/iam/POSTGRES_PASSWORD:/secrets/POSTGRES_PASSWORD
            - ./secrets/iam/SECRET_KEY:/secrets/SECRET_KEY
        # Use if should be available on host
        ports:
            - "8000:8000"
        command: python3 -u manage.py runserver 0.0.0.0:8000
        depends_on:
            - data-iam

    api-files:
        build:
            context: ./API/files
            dockerfile: dev.Dockerfile
        restart: always
        volumes:
            - ./API/files:/app
            - ./data/files/gameFiles:/uploads
        # Use if should be available on host
        ports:
            - "9090:9090"
        command: lein run

    data-games:
        build:
            context: ./data/games
            dockerfile: dev.Dockerfile
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME_FILE: /secrets/MONGO_INITDB_ROOT_USERNAME
            MONGO_INITDB_ROOT_PASSWORD_FILE: /secrets/MONGO_INITDB_ROOT_PASSWORD
            MONGO_INITDB_DATABASE: games
            MONGO_NON_ROOT_USERNAME_FILE: /secrets/MONGO_NON_ROOT_USERNAME
            MONGO_NON_ROOT_PASSWORD_FILE: /secrets/MONGO_NON_ROOT_PASSWORD
        volumes:
            - ./secrets/games/MONGO_INITDB_ROOT_USERNAME:/secrets/MONGO_INITDB_ROOT_USERNAME
            - ./secrets/games/MONGO_INITDB_ROOT_PASSWORD:/secrets/MONGO_INITDB_ROOT_PASSWORD
            - ./secrets/games/MONGO_NON_ROOT_USERNAME:/secrets/MONGO_NON_ROOT_USERNAME
            - ./secrets/games/MONGO_NON_ROOT_PASSWORD:/secrets/MONGO_NON_ROOT_PASSWORD
            - ./data/games/db:/data/db
            - ./data/games/initMongoGamesDB.sh:/docker-entrypoint-initdb.d/initMongoGamesDB.sh

    data-iam:
        build:
            context: ./data/iam
            dockerfile: dev.Dockerfile
        restart: always
        environment:
            POSTGRES_USERNAME_FILE: /secrets/POSTGRES_USERNAME
            POSTGRES_PASSWORD_FILE: /secrets/POSTGRES_PASSWORD
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_DB: iam
        volumes:
            - ./secrets/iam/POSTGRES_USERNAME:/secrets/POSTGRES_USERNAME
            - ./secrets/iam/POSTGRES_PASSWORD:/secrets/POSTGRES_PASSWORD
            - ./data/iam/db:/var/lib/postgresql/data
